name: "g2g_GRU"

# This configuration serves the purpose of documenting and explaining the settings, *NOT* as an example for good hyperparamter settings.

data: # specify your data here
    src: "de"                       # src language: expected suffix of train files, e.g. "train.de"
    trg: "gloss"                       # trg language
    train: "../dataset/Phoenix2014T_Extracted/phoenix2014T.train"    # training data
    dev: "../dataset/Phoenix2014T_Extracted/phoenix2014T.dev"      # development data for validation
    test: "../dataset/Phoenix2014T_Extracted/phoenix2014T.test"      # development data for validation
    random_train_subset: -1         # select this many training examples randomly for training and discard the rest, -1: all
    random_dev_subset: -1
    level: "word"                   # segmentation level: either "word", "bpe" or "char"
    lowercase: True                 # lowercase the data, also for validation
    max_sent_length: 400             # filter out longer sentences from training (src+trg)
    #src_vocab: "../dataset/Phoenx2014T_data/phoenix2014T.vocab.de"   # if specified, load a vocabulary from this file
    #trg_vocab: "../dataset/Phoenx2014T_data/phoenix2014T.vocab.gloss"  # one token per line, line number is index



testing:                            # specify which inference algorithm to use for testing (for validation it's always greedy decoding)
    beam_size: 5                    # size of the beam for beam search
    alpha: 1.0                      # length penalty for beam search

training:                           # specify training details here
    #load_model: "models/small_model/60.ckpt" # if given, load a pre-trained model from this checkpoint
    #reset_best_ckpt: False          # if True, reset the tracking of the best checkpoint and scores. Use for domain adaptation or fine-tuning with new metrics or dev data.
    #reset_scheduler: False          # if True, overwrite scheduler in loaded checkpoint with parameters specified in this config. Use for domain adaptation or fine-tuning.
    #reset_optimizer: False          # if True, overwrite optimizer in loaded checkpoint with parameters specified in this config. Use for domain adaptation or fine-tuning.
    random_seed: 42
    optimizer: "adam"
    normalization: "batch"
    adam_betas: [0.9, 0.999]
    #scheduling: "plateau"
    #patience: 5
    #decrease_factor: 0.7
    loss: "crossentropy"
    learning_rate: 0.00001
#    learning_rate_min: 0.00000001
#    weight_decay: 0.0
    label_smoothing: 0.1
    batch_size: 256
    batch_type: "sentence"
    early_stopping_metric: "eval_metric"
    epochs: 1000
    validation_freq: 5
    logging_freq: 100
    eval_metric: "bleu"
    model_dir: "models_v2/g2g_GRU_stoll_config_train_b128_lr.00001_exDataset"
    overwrite: True
    shuffle: True
    use_cuda: True
    max_output_length: 100
    print_valid_sents: [0, 1, 2, 3]
    keep_last_ckpts: 3

model:                              # specify your model architecture here
    initializer: "xavier"           # initializer for all trainable weights (xavier, zeros, normal, uniform)
    init_weight: 0.01               # weight to initialize; for uniform, will use [-weight, weight]
    init_gain: 1.0                  # gain for Xavier initializer (default: 1.0)
    bias_initializer: "zeros"       # initializer for bias terms (xavier, zeros, normal, uniform)
    embed_initializer: "xavier"     # initializer for embeddings (xavier, zeros, normal, uniform)
    embed_init_weight: 0.1          # weight to initialize; for uniform, will use [-weight, weight]
    embed_init_gain: 1.0            # gain for Xavier initializer for embeddings (default: 1.0)
    init_rnn_orthogonal: False      # use orthogonal initialization for recurrent weights (default: False)
    lstm_forget_gate: 1.            # initialize LSTM forget gate with this value (default: 1.)
    tied_embeddings: False          # tie src and trg embeddings, only applicable if vocabularies are the same, default: False
    tied_softmax: False             # tie trg embeddings and softmax (for Transformer; can be used together with tied_embeddings), default: False
    encoder:
        type: "recurrent"           # encoder type: "recurrent" for LSTM or GRU, or "transformer" for a Transformer
        rnn_type: "gru"             # type of recurrent unit to use, either "gru" or "lstm", default: "lstm"
        embeddings:
            embedding_dim: 256       # size of embeddings
            scale: False            # scale the embeddings by sqrt of their size, default: False
            freeze: False           # if True, embeddings are not updated during training
        hidden_size: 1000           # size of RNN
        bidirectional: True         # use a bi-directional encoder, default: True
        dropout: 0.2                # apply dropout to the inputs to the RNN, default: 0.0
        num_layers: 4               # stack this many layers of equal size, default: 1
        freeze: False               # if True, encoder parameters are not updated during training (does not include embedding parameters)
    decoder:
        type: "recurrent"           # decoder type: "recurrent" for LSTM or GRU, or "transformer" for a Transformer
        rnn_type: "gru"
        embeddings:
            embedding_dim: 256
            scale: False
            freeze: False           # if True, embeddings are not updated during training
        hidden_size: 1000
        dropout: 0.2
        hidden_dropout: 0         # apply dropout to the attention vector, default: 0.0
        num_layers: 4
        input_feeding: True         # combine hidden state and attention vector before feeding to rnn, default: True
        init_hidden: "last"         # initialized the decoder hidden state: use linear projection of last encoder state ("bridge") or simply the last state ("last") or zeros ("zero"), default: "bridge"
        attention: "luong"       # attention mechanism, choices: "bahdanau" (MLP attention), "luong" (bilinear attention), default: "bahdanau"
        freeze: False               # if True, decoder parameters are not updated during training (does not include embedding parameters, but attention)
